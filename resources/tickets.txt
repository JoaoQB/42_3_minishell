ticket 0: DONE
header file with the structure

ticket 1: DONE
do a finder <, >, >>, process that and remove processed text from the string.
"DIR <" needs to have preceded text, if not empty string is passed to open
"> DIR" needs to have proceeded text, if not empty string is passed to open
>> is the same as > with diff permissions
<< just opens function gnl_openfd (I have this function)

ticket 2: DONE
parcel while remaining string, and add to the structure token by token
repeated spaces are ignored
if <|> is found we NULL terminate last "**char commands[n]" slot and jump to next n
	new_ticket: in case last token is empy we call gnl_openfd and all that text will be executed as <minishell(* char)> //TODO

ticket 2.1: QUOTES
Need to refine words that have quotes. i.e. foo|bar"quote"
Remove quotes but do expansion before in case of $ and "".

ticket 2.2: Var expansion
https://github.com/ahokcool/frankenshell/blob/main/docs/documentation.md#variable-expansion


ticket 2.3: ENV linked list


ticket 3:
function that executes each **char commands[n] and pipe it to the next
(this is pipex, that must be adapted to receive signals)

-- except commands with cd, may create a new pipe that will not be used (for conformity)
/but open <void change_cd(*char)> function

ticket 4:
void change_cd(**char)

ticket 5:
/token = *char process quotes(&char[i])
/return (next string token)
edge case 'COMMAND | COMMAND' is to run this command I was thinking do an qeuee linked list and put it in priority, or open child process to do minishell(*char substring)

ticket last (bonus)
when we have &&, ||, ; linklist stroctures to the next process
() in this case deal the same of edge case 'COMMAND | COMMAND'

Structure:
Int number_of_commands -> size of the int arrays maching number of commands ran
***char commands
*int pid -> of each child process (execve) pid
*int fd[2] ->for each child process to have an write and read fd
each command have an structure
Commands[0] = Token0 (command1), Token1 flag1, Token2 flag2, NULL
Commands[1] = Token0 (command2), NULL
Commands[n] = NULL; (safeguard)

PARSING:
Ignore for now: &&, ||, ;, will all be handle by creating an linked list of an new process to be ran, depending on the conditions we have.
Run the string token by token, if we find quotes they will be treated as an single token and be processed accordingly.

QUOTES:
Single quote (SQu) – everything remains as it is including, \, $, and double quoting
Double quote (Dqu) – interprets ->  $,  \, and ‘command‘
				How do we insert command ran into this ‘CMD’ variable? /TODO
Remove processed quotes and \ in the case of SQu
--Have to be carefully, we process first quote (SQu or Dqu) and restart search ate the end of prev.

<, >, >> selects the opens file and saves its fd
<< uses get_next_line to pipe into fd and saves this fd
Tokens separation

Pipes:
	After files preprocessing, we
